buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("net.serenity-bdd:serenity-gradle-plugin:2.4.34")
    classpath("au.com.dius.pact.provider:gradle:4.1.41") {
      exclude group: 'com.vladsch.flexmark'
    }
  }
}

plugins {
  id "java"
  id "java-library"
  id 'application'
  id 'checkstyle'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.10.RELEASE'
  id 'org.springframework.boot' version '2.5.6'
  id 'com.github.ben-manes.versions' version '0.47.0'
  id 'org.sonarqube' version '3.3'
  id 'project-report'
  id "idea"
  id "info.solidsoft.pitest" version '1.5.2'
  id 'com.github.hmcts.rse-cft-lib' version '0.19.798'
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: 'au.com.dius.pact'

group = 'uk.gov.hmcts.reform'
version = '1.0.0'

def mirrorHost = System.env.NONPROD_SUBSCRIPTION_NAME == "sandbox" ? "artifactory.sandbox" : "artifactory"
def mirrorUrl = "https://${mirrorHost}.platform.hmcts.net/artifactory/maven-remotes"

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/functionalTest/java')
    }
  }

  integrationTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/integrationTest/java')
    }
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
  }

  contractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/contractTest/java')
    }
  }
}

idea {
  module {
    testSourceDirs += file('src/integrationTest/java')
    testSourceDirs += file('src/functionalTest/java')
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntime.extendsFrom testRuntime
  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntime.extendsFrom testRuntime
  cftlibTestImplementation.extendsFrom testImplementation
  cftlibTestRuntime.extendsFrom testRuntime
}

configurations.integrationTestImplementation {
  exclude group: 'org.springframework.cloud', module: 'spring-cloud-starter-netflix-hystrix'
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

//Comment this section in to allow for additional logging of unit tests for any tests with type 'Test'
/*tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}*/

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  // set your environment variables here
  // environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}
check.dependsOn integration

task lintUserInterfaceTests(type: Exec, description: 'Runs linting of E2E tests.') {
  commandLine '/usr/bin/yarn', 'lint'
}

task runSmokeTests(type: Exec, description: 'Runs smoke tests.') {
  commandLine '/usr/bin/yarn', '--silent', 'test:smoke'
}

task runApiTests(type: Test, description: 'Runs api tests.', group: 'Verification') {
  onlyIf {
    return System.env.SKIP_API_TESTS == null || System.env.SKIP_API_TESTS == 'false'
  }
  testLogging.showStandardStreams = true
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  finalizedBy aggregate
}

project.ext {
  pacticipant = 'fpl_ccdConfiguration'
  pacticipantVersion = getCheckedOutGitCommitHash()
}

task runContractTests(type: Test, description: 'Runs contract tests.', group: 'Verification') {
  onlyIf {
    return System.env.SKIP_CONTRACT_TESTS == null || System.env.SKIP_CONTRACT_TESTS == 'false'
  }
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
  systemProperty 'pact.rootDir', "pacts"
  testLogging.showStandardStreams = true
}

task runAndPublishConsumerPactTests(type: Test, description: 'Publish pact test to broker.', group: 'Verification') {
  logger.lifecycle("Runs pact consumer Tests")
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
}

runAndPublishConsumerPactTests.dependsOn runContractTests

runAndPublishConsumerPactTests.finalizedBy pactPublish

def getCheckedOutGitCommitHash() {
  'git rev-parse --verify --short HEAD'.execute().text.trim()
}

pact {
  broker {
    pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
  }
  publish {
    pactDirectory = 'service/pacts'
    tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
    version = project.pacticipantVersion
  }
}


def static inStrictOrder(Task... tasks) {
  for (int i = 0; i < tasks.size() - 1; i++) {
    tasks[i + 1].mustRunAfter(tasks[i])
  }
  return tasks
}

task smoke(type: Test, description: 'Runs smoke test.', group: 'Verification') {
  testLogging.showStandardStreams = true
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  include "uk/gov/hmcts/reform/fpl/smoke/**"
  finalizedBy aggregate
}

task runCodeceptSmokeTest(type: Test, description: 'Runs the old codecept smoke test.', group: 'Verification') {
  dependsOn(inStrictOrder(runSmokeTests))
}

task functional(description: 'Runs the functional tests.') {
  dependsOn(inStrictOrder(runApiTests))
}

task contract(description: 'Runs the contract tests.') {
  dependsOn(inStrictOrder(runContractTests))
}

task runCrossBrowserTests(type: Exec, description: 'Runs ExpertUI cross brower tests.') {
  onlyIf {
    return System.env.SKIP_BROWSER_TESTS == null || System.env.SKIP_BROWSER_TESTS == 'false'
  }
  commandLine '/usr/bin/yarn', '--silent', 'test:crossbrowser'
}

task crossbrowser(description: 'Runs crossbrowser tests.') {
  dependsOn(inStrictOrder(lintUserInterfaceTests, runCrossBrowserTests))
}

task fortifyScan(type: JavaExec) {
  mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

task highLevelDataSetup(type: JavaExec, description: 'High level data step mock implementation - DO NOTHING.') {
  onlyIf {
    return false
  }
}

checkstyle {
  maxWarnings = 0
  toolVersion = "8.25"
  // need to set configDirectory to rootDir otherwise submodule will use submodule/config/checkstyle
  configDirectory.set(file("$rootDir/config/checkstyle"))
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.destination = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

sonarqube {
  properties {
    property "sonar.projectName", "fpl-service"
    property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    property "sonar.coverage.exclusions", "**/model/**, **/config/**/*Configuration.java, **/testingsupport/**, **MigrateCaseController.java, **/controllers/support/**"
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  // TODO: that's the only dependency to move (confirm with ops when that's migrated) https://tools.hmcts.net/jira/browse/FPLA-2978
  maven {
    url "https://dl.bintray.com/hmcts/hmcts-maven"
  }
  maven {
    url "https://repo.spring.io/milestone"
  }
  maven {
    url mirrorUrl
  }
}

// it is important to specify logback classic and core packages explicitly as libraries like spring boot
// enforces it's own (older) version which is not recommended.
def versions = [
  reformLogging   : '5.1.7',
  springBoot      : springBoot.class.package.implementationVersion,
  springfoxSwagger: '2.9.2',
  log4j           : '2.16.0',
  pdfbox          : '2.0.29',
  mockito         : '3.7.7',
  serenity        : '2.4.5',
  pact_version    : '4.1.7',
  junit_jupiter   : '5.7.1',
  lombok          : '1.18.28'
]

dependencies {
  compileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-quartz'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.retry', name: 'spring-retry'

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-mail'

  implementation group: 'org.springframework.security', name: 'spring-security-config'
  implementation group: 'org.springframework.security', name: 'spring-security-oauth2-resource-server'
  implementation group: 'org.springframework.security', name: 'spring-security-oauth2-jose'

  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.2.10.RELEASE'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: versions.log4j
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: versions.log4j

  implementation group: 'org.apache.pdfbox', name: 'pdfbox', version: versions.pdfbox

  implementation group: 'org.apache.commons', name: 'commons-text', version: '1.10.0'
  implementation group: 'org.apache.commons', name: 'commons-csv', version: '1.10.0'

  implementation group: 'com.launchdarkly', name: 'launchdarkly-java-server-sdk', version: '5.10.9'

  implementation group: 'io.github.openfeign', name: 'feign-core', version: '11.2'

  implementation group: 'org.postgresql', name: 'postgresql', version: '42.6.0'
  implementation group: 'org.flywaydb', name: 'flyway-core', version: '8.5.13'

  implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
  implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger

  implementation group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: '0.1.0'
  implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformLogging
  implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging

  implementation group: 'uk.gov.hmcts.reform', name: 'idam-client', version: '2.0.0'
  implementation group: 'uk.gov.hmcts.reform', name: 'document-management-client', version: '7.0.0'
  implementation group: 'uk.gov.hmcts.reform', name: 'core-case-data-store-client', version: '4.7.6'
  implementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '4.0.0'
  implementation group: 'uk.gov.hmcts.reform.auth', name: 'auth-checker-lib', version: '2.1.4'
  implementation group: 'com.github.hmcts', name: 'send-letter-client', version: '3.0.16'
  implementation group: 'uk.gov.service.notify', name: 'notifications-java-client', version: '3.17.3-RELEASE'

  implementation group: 'com.github.hmcts', name: 'ccd-case-document-am-client', version: '1.7.3'

  implementation group: 'com.google.guava', name: 'guava', version: '31.1-jre'
  implementation group: 'commons-io', name: 'commons-io', version: '2.13.0'

  implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'

  implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-joda', version: '2.15.2'

  implementation group: 'net.minidev', name: 'json-smart', version: '2.5.0'

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-mail'

  testImplementation group: 'org.pitest', name: 'pitest', version: '1.14.4'
  testImplementation group: 'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: '1.9.11'
  testImplementation group: 'org.apache.pdfbox', name: 'pdfbox', version: versions.pdfbox
  integrationTestImplementation group: 'org.apache.pdfbox', name: 'pdfbox', version: versions.pdfbox

  testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    exclude group: "com.vaadin.external.google", module: "android-json"
  }

  integrationTestImplementation group: 'org.apache.commons', name: 'commons-text', version: '1.10.0'
  testImplementation group: 'org.springframework.retry', name: 'spring-retry'
  testImplementation group: 'org.awaitility', name: 'awaitility', version: '4.2.0'

  testImplementation group: 'org.springframework.security', name: 'spring-security-test'

  testImplementation group: 'org.mockito', name: 'mockito-core', version: versions.mockito
  testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: versions.mockito
  testImplementation group: 'org.mockito', name: 'mockito-inline', version: versions.mockito

  // Fortify client for Fortify scans
  testImplementation 'com.github.hmcts:fortify-client:1.2.0:all'

  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
  functionalTestCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  functionalTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath


  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath

  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath

  contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
  contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version
  contractTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  contractTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit_jupiter
  contractTestRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit_jupiter
  contractTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit_jupiter
  contractTestRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-commons', version: '1.8.2'
  contractTestImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.4'
  contractTestImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.11.4'
  contractTestImplementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '2.2.7.RELEASE'
  contractTestImplementation group: 'org.springframework.cloud', name: 'spring-cloud-netflix-ribbon', version: '2.2.10.RELEASE'
  contractTestImplementation group: 'com.netflix.ribbon', name: 'ribbon-core', version: '2.7.18'
  contractTestImplementation group: 'uk.gov.hmcts.reform', name: 'core-case-data-store-client', version: '4.7.6'
  contractTestImplementation group: 'com.google.guava', name: 'guava', version: '30.1.1-jre'


  cftlibImplementation group: 'com.github.tomakehurst', name: 'wiremock-jre8', version: '2.35.1'
  cftlibImplementation 'com.github.masonm:wiremock-jwt-extension:0.10'
}

mainClassName = 'uk.gov.hmcts.reform.fpl.Application'

bootJar {
  archiveFileName = 'service.jar'

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

test {
  maxHeapSize = "1024m"
  useJUnitPlatform()
}

integration {
  maxHeapSize = "1024m"
  useJUnitPlatform()
}

pitest {
  logger.lifecycle("Runs PIT  Tests")

  junit5PluginVersion = '0.14'
  testSourceSets = [sourceSets.test]
  mainSourceSets = [sourceSets.main]
  targetClasses = ['uk.gov.hmcts.reform.fpl.*']
  excludedClasses = [
    'uk.gov.hmcts.reform.fpl.config.*',
    'uk.gov.hmcts.reform.fpl.exceptions.*',
    'uk.gov.hmcts.reform.fpl.controllers.*',
    'uk.gov.hmcts.reform.fpl.testingsupport.*'
  ]
  jvmArgs = ['-Xms1G', '-Xmx3G']
  threads = 10
  enableDefaultIncrementalAnalysis = true
  outputFormats = ['XML', 'HTML']
  timestampedReports = false
  failWhenNoMutations = false
  detectInlinedCode = true
  maxMutationsPerClass = 15
  mutationThreshold = 80
  timeoutConstInMillis = 30000
}

dependencyManagement {
  imports {
    mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2020.0.6'
  }
}

task generateXls(type: Exec) {
  doFirst {
    environment 'CCD_DEF_CASE_SERVICE_BASE_URL', 'http://localhost:4013'
    environment 'CCD_DEF_AAC_URL', 'http://localhost:4454'
  }
  def definitionDir = rootProject.file('ccd-definition')
  def xls = layout.buildDirectory.file('fpl.xlsx').get().asFile
  commandLine rootProject.file('fpla-docker/bin/utils/fpl-process-definition.sh')
  args definitionDir, xls, '-e *-prod.json,*-shuttered.json'
  inputs.dir definitionDir
  outputs.file xls
}

task loadEnvSecrets() {
  doLast {
    if (!project.file('../build/cftlib/.aat-env').exists()) {
      new ByteArrayOutputStream().withStream { os ->
        exec {
          commandLine 'az', 'keyvault', 'secret', 'show', '--vault-name', 'fpl-aat', '-o', 'tsv', '--query', 'value', '--name', 'fpl-cftlib-aat-env'
          standardOutput = os
        }
        project.file('../build/cftlib/.aat-env').write(new String(os.toString().replace('\n', '').decodeBase64(), java.nio.charset.StandardCharsets.UTF_8))
      }
    }
  }
}

bootWithCCD {
  group = 'ccd tasks'
  dependsOn(tasks.loadEnvSecrets, tasks.generateXls)

  doFirst() {
    project.file('../build/cftlib/.aat-env').readLines().each() {
      if (it.contains("=")) {
        def index = it.indexOf("=")
        def key = it.substring(0, index)
        def value = it.substring(index + 1)
        environment key, value
      }
    }

    environment "spring.profiles.active", "feature-toggle,local,user-mappings"
    environment 'rse.lib.stub.s2s', 'true'
    environment 'DOCUMENT_MANAGEMENT_URL', 'http://dm-store-aat.service.core-compute-aat.internal'
    environment 'SEND_LETTER_URL', 'http://dm-store-aat.service.core-compute-aat.internal'
    environment 'PRD_HOST', 'http://rd-professional-api-aat.service.core-compute-aat.internal'
    environment 'MANAGE_CASE_S2S_AUTHORISED_SERVICES', 'ccd_gw,xui_webapp,ccd_data,fpl_case_service'
  }
}

processCftlibResources {
  from rootProject.fileTree('fpla-docker/mocks')
}
