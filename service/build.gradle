plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.6.RELEASE'
  id 'org.springframework.boot' version '2.1.0.RELEASE'
  id 'org.owasp.dependencycheck' version '3.3.4'
  id 'com.github.ben-manes.versions' version '0.20.0'
  id 'org.sonarqube' version '2.6.2'
}

apply plugin: 'info.solidsoft.pitest'

group = 'uk.gov.hmcts.reform'
version = '1.0.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath

  // set your environment variables here
  // environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}
check.dependsOn integration

task smoke(type: Exec, description: 'Runs the smoke tests.') {
  commandLine '../kubernetes/configurer/utils/wait-for.sh', environment.get('URL')
}

task functionalInstall(type: Exec, description: 'Installs E2E dependencies.') {
  commandLine '/usr/bin/yarn', '--mutex', 'network', '--silent', 'install'
}

task functionalRun(type: Exec, description: 'Runs E2E tests.') {
  commandLine '/usr/bin/yarn', '--silent', 'test'
}

task functional(description: 'Runs the functional tests.') {
  dependsOn(functionalInstall, functionalRun)
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.14'
  // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
  configDir = new File(rootDir, 'config/checkstyle')
}

pmd {
  toolVersion = "6.9.0"
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSetFiles = files("../config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'
  outputDirectory = 'build/reports'
}

sonarqube {
  properties {
    property "sonar.projectName", "FPL :: Service"
    property "sonar.jacoco.reportPath", file("${project.buildDir}/jacoco/test.exec")
    property "sonar.jacoco.itReportPath", file("${project.buildDir}/jacoco/integration.exec")
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
  }
}

repositories {
  jcenter()
  maven {
    url "https://dl.bintray.com/hmcts/hmcts-maven"
  }
  maven {
    url  "http://repo.spring.io/milestone"
  }
}

// it is important to specify logback classic and core packages explicitly as libraries like spring boot
// enforces it's own (older) version which is not recommended.
def versions = [
  reformLogging: '3.0.2',
  springBoot: springBoot.class.package.implementationVersion,
  springfoxSwagger: '2.9.2'
]

dependencies {
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-json', version: versions.springBoot

  compile group: 'org.json', name: 'json', version: '20180813'

  compile group: 'com.google.guava', name: 'guava', version: '27.0.1-jre'

  compile group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
  compile group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger

  compile group: 'uk.gov.hmcts.reform', name: 'java-logging', version: versions.reformLogging
  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.0.2.RELEASE'

  compile group: 'uk.gov.hmcts.reform', name: 'pdf-generator', version: '1.0.2'
  compile group: 'uk.gov.hmcts.reform', name: 'idam-client', version: '0.0.2'
  compile group: 'uk.gov.hmcts.reform', name: 'document-management-client', version: '4.0.1'
  compile group: 'uk.gov.hmcts.reform', name: 'core-case-data-store-client', version: '4.4.1'
  compile group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '1.0.4'

  compile group: 'commons-io', name: 'commons-io', version: '2.6'

  testCompile (group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot) {
    exclude group: 'junit', module: 'junit'
  }
  testCompile group: 'org.junit.jupiter', name :'junit-jupiter-api', version: '5.3.1'
  testCompile group: 'org.junit.jupiter', name :'junit-jupiter-params', version: '5.3.1'
  testRuntime group: 'org.junit.jupiter', name :'junit-jupiter-engine', version:'5.3.1'
  testCompile group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.12'

  integrationTestCompile sourceSets.main.runtimeClasspath
  integrationTestCompile sourceSets.test.runtimeClasspath

  functionalTestCompile sourceSets.main.runtimeClasspath

  smokeTestCompile sourceSets.main.runtimeClasspath
}

mainClassName = 'uk.gov.hmcts.reform.fpl.Application'

bootJar {
  archiveName = 'service.jar'

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

test {
  useJUnitPlatform()
}

integration {
  useJUnitPlatform()
}

pitest {
  pitestVersion = '1.4.3'
  testPlugin = 'junit5'
  targetClasses = ['uk.gov.hmcts.reform.fpl.*']
  testSourceSets = [sourceSets.test, sourceSets.integrationTest]
  threads = 10
  enableDefaultIncrementalAnalysis = true
  historyInputLocation = 'build/reports/pitest/history'
  historyOutputLocation = 'build/reports/pitest/history'
  outputFormats = ['XML', 'HTML']
  timestampedReports = false
  mutationThreshold = 80
  timeoutConstInMillis = 30000
}
