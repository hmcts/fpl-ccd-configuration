plugins {
  id "java"
  id "java-library"
  id 'application'
  id 'checkstyle'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.9.RELEASE'
  id 'org.springframework.boot' version '2.3.1.RELEASE'
  id 'com.github.ben-manes.versions' version '0.28.0'
  id 'org.sonarqube' version '2.8'
  id 'project-report'
  id "idea"
  id 'info.solidsoft.pitest' version '1.5.1'
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'info.solidsoft.pitest'
apply plugin: 'org.owasp.dependencycheck'

group = 'uk.gov.hmcts.reform'
version = '1.0.0'

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath

  // set your environment variables here
  // environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}
check.dependsOn integration

task installDependencies(type: Exec, description: 'Installs Yarn dependencies.') {
  commandLine '/usr/bin/yarn', '--mutex', 'network', '--frozen-lockfile', '--silent', 'install'
}

task checkDependenciesIntegrity(type: Exec, description: 'Checks integrity of Yarn dependencies.') {
  commandLine '/usr/bin/yarn', '--mutex', 'network', '--frozen-lockfile', '--silent', 'check', '--integrity'
}

task lintUserInterfaceTests(type: Exec, description: 'Runs linting of E2E tests.') {
  commandLine '/usr/bin/yarn', '--silent', 'lint'
}

task awaitApplicationReadiness(type: Exec, description: 'Awaits until application is ready.') {
  commandLine '../bin/wait-for.sh', System.env.URL
}

task runSmokeTests(type: Exec, description: 'Runs smoke tests.') {
  commandLine '/usr/bin/yarn', '--silent', 'test:smoke'
}

task runFunctionalTest(type: Exec, description: 'Runs functional tests.') {
  onlyIf(new Spec<Task>() {
    boolean isSatisfiedBy(Task task) {
      String skipTestsEnvironmentVariable = System.env.SKIP_FUNCTIONAL_TESTS
      return skipTestsEnvironmentVariable == null || skipTestsEnvironmentVariable == 'false'
    }
  })
  commandLine '/usr/bin/yarn', '--silent', 'test:functional'
}

def inStrictOrder(Task... tasks) {
  for (int i = 0; i < tasks.size() - 1; i++) {
    tasks[i + 1].mustRunAfter(tasks[i])
  }
  return tasks
}

task smoke(description: 'Runs the smoke tests.') {
  dependsOn(inStrictOrder(awaitApplicationReadiness, installDependencies, checkDependenciesIntegrity, lintUserInterfaceTests, runSmokeTests))
}

task functional(description: 'Runs the functional tests.') {
  dependsOn(inStrictOrder(awaitApplicationReadiness, installDependencies, checkDependenciesIntegrity, lintUserInterfaceTests, runFunctionalTest))
}

checkstyle {
  maxWarnings = 0
  toolVersion = "8.25"
  // need to set configDirectory to rootDir otherwise submodule will use submodule/config/checkstyle
  configDirectory.set(file("$rootDir/config/checkstyle"))
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'
  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
  analyzedTypes = ['jar']
  scanConfigurations = configurations.findAll {
    !it.name.startsWith('checkstyle') && !it.name.startsWith('jacoco') && !it.name.startsWith('integrationTest') &&
      !it.name.startsWith('smokeTest') && !it.name.startsWith('functionalTest')
  }.collect { it.name }
}

sonarqube {
  properties {
    property "sonar.projectName", "FPL :: Service"
    property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    property "sonar.coverage.exclusions", "**/model/**, **/config/**/*Configuration.java, **/testingsupport/**"
  }
}

repositories {
  mavenLocal()
  jcenter()
  mavenCentral()

  maven {
    url "https://dl.bintray.com/hmcts/hmcts-maven"
  }

  maven {
    url  "https://repo.spring.io/milestone"
  }
}

// it is important to specify logback classic and core packages explicitly as libraries like spring boot
// enforces it's own (older) version which is not recommended.
def versions = [
  reformLogging: '5.1.0',
  springBoot: springBoot.class.package.implementationVersion,
  springfoxSwagger: '2.9.2',
  log4j: '2.13.2'
]

dependencies {
  compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.12'
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.12'

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-quartz'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'

  compile group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-mail'

  implementation group: 'org.springframework.security', name: 'spring-security-config'
  implementation group: 'org.springframework.security', name: 'spring-security-oauth2-resource-server'
  implementation group: 'org.springframework.security', name: 'spring-security-oauth2-jose'

  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.2.3.RELEASE'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: versions.log4j
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: versions.log4j

  compile group: 'com.launchdarkly', name: 'launchdarkly-java-server-sdk', version: '5.0.2'

  implementation group: 'io.github.openfeign', name: 'feign-core', version: '11.0'

  implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.14'
  implementation group: 'org.flywaydb', name: 'flyway-core', version: '6.5.0'

  implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
  implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger

  compile group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: '0.1.0'
  compile group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformLogging
  compile group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging

  compile group: 'uk.gov.hmcts.reform', name: 'pdf-generator', version: '1.0.2'
  compile group: 'uk.gov.hmcts.reform', name: 'idam-client', version: '1.5.3'
  compile group: 'uk.gov.hmcts.reform', name: 'document-management-client', version: '7.0.0'
  compile group: 'uk.gov.hmcts.reform', name: 'core-case-data-store-client', version: '4.6.4'
  compile group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '3.1.2'
  compile group: 'uk.gov.hmcts.reform.auth', name: 'auth-checker-lib', version: '2.1.4'
  compile group: 'uk.gov.hmcts.reform', name: 'send-letter-client', version: '2.5.0'
  compile group: 'uk.gov.service.notify', name: 'notifications-java-client', version: '3.15.1-RELEASE'

  implementation group: 'com.google.guava', name: 'guava', version: '29.0-jre'
  implementation group: 'commons-io', name: 'commons-io', version: '2.7'

  implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'

  compile group: 'org.springframework.boot', name: 'spring-boot-starter-mail'

  testImplementation group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.20'

  testCompile (group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    exclude group: "com.vaadin.external.google", module:"android-json"
  }

  testCompile group: 'org.apache.commons', name: 'commons-text', version: '1.8'
  testCompile group: 'org.awaitility', name: 'awaitility', version: '4.0.3'

  testCompile group: 'org.springframework.security', name: 'spring-security-test'

  integrationTestCompile configurations.testRuntime {
    exclude group: 'org.springframework.cloud', module: 'spring-cloud-starter-netflix-hystrix'
  }

  functionalTestCompile configurations.runtime

  smokeTestCompile configurations.runtime
}

mainClassName = 'uk.gov.hmcts.reform.fpl.Application'

bootJar {
  archiveFileName = 'service.jar'

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

test {
  useJUnitPlatform()
}

integration {
  useJUnitPlatform()
}

pitest {
  pitestVersion.set('1.4.11')
  junit5PluginVersion.set('0.12')
  targetClasses.set(['uk.gov.hmcts.reform.fpl.*'])
  excludedClasses.set([
    'uk.gov.hmcts.reform.fpl.config.*',
    'uk.gov.hmcts.reform.fpl.exceptions.*',
    'uk.gov.hmcts.reform.fpl.controllers.*',
    'uk.gov.hmcts.reform.fpl.testingsupport.*'
  ])
  threads.set(10)
  enableDefaultIncrementalAnalysis.set(true)
  outputFormats.set(['XML', 'HTML'])
  timestampedReports.set(false)
  mutationThreshold.set(80)
  timeoutConstInMillis.set(30000)
  mutators.set([
    'CONDITIONALS_BOUNDARY',
    'INCREMENTS',
    'INVERT_NEGS',
    'MATH',
    'NEGATE_CONDITIONALS',
    'VOID_METHOD_CALLS',
    'EMPTY_RETURNS',
    'FALSE_RETURNS',
    'NULL_RETURNS',
    'PRIMITIVE_RETURNS',
    'TRUE_RETURNS',
    'REMOVE_CONDITIONALS'
  ])
}
