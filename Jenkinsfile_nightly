#!groovy

properties([
  pipelineTriggers([cron('0 19 * * *')]),
  parameters([
    string(name: 'FRONTEND_URL', defaultValue: 'https://manage-case.aat.platform.hmcts.net',
      description: 'The URL you want to run the full functional tests against'),
    string(name: 'CASE_SERVICE_URL', defaultValue: 'http://fpl-case-service-aat.service.core-compute-aat.internal',
      description: 'The URL of case service callbacks'),
    string(name: 'IDAM_API_URL', defaultValue: 'https://idam-api.aat.platform.hmcts.net',
      description: 'The URL of idam api'),
    string(name: 'DM_STORE_URL', defaultValue: 'http://dm-store-aat.service.core-compute-aat.internal',
      description: 'The URL of dm store'),
    string(name: 'SECURITY_RULES',
      defaultValue: 'https://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
      description: 'The security rules to use'),
    string(name: 'FUNCTIONAL_TESTS_WORKERS',
      defaultValue: '2',
      description: 'Number of workers running functional tests'),
  ])
])

@Library('Infrastructure')
import uk.gov.hmcts.contino.AppPipelineConfig

def type = 'java'
def product = 'fpl'
def component = 'case-service'
AppPipelineConfig pipelineConf;

def integrationTestSecrets = [
  'fpl-aat': [
    secret('integration-test-notify-service-key', 'INTEGRATION_TEST_NOTIFY_SERVICE_KEY')
  ]
]

static Map<String, Object> secret(String secretName, String envVariable) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    envVariable: envVariable
  ]
}

def setupSecretsForIntegrationTests(pipelineConf) {
  withSubscription('nonprod') {
    withTeamSecrets(pipelineConf, 'aat') {
      /* Setup Email template integration tests key with gov.notify */
      env.INTEGRATION_TEST_NOTIFY_SERVICE_KEY = "${INTEGRATION_TEST_NOTIFY_SERVICE_KEY}"
    }
  }
}

def teardownSecretsForIntegrationTests() {
  env.INTEGRATION_TEST_NOTIFY_SERVICE_KEY = ''
}

withNightlyPipeline(type, product, component) {
  pipelineConf = config;

  env.URL = params.FRONTEND_URL
  env.URL_FOR_SECURITY_SCAN = params.CASE_SERVICE_URL
  env.DM_STORE_URL=params.DM_STORE_URL
  env.IDAM_API_URL=params.IDAM_API_URL
  env.CASE_SERVICE_URL=params.CASE_SERVICE_URL
  env.SECURITY_RULES = params.SECURITY_RULES

  loadVaultSecrets(integrationTestSecrets)

  enableSecurityScan()
  enableMutationTest()
  enableFullFunctionalTest(120)
  enableCrossBrowserTest()

  before('mutationTest') {
    setupSecretsForIntegrationTests(pipelineConf)
  }

  after('mutationTest') {
    withSonarQubeEnv('SonarQube') {
      sh './gradlew --info sonarqube'
    }
    teardownSecretsForIntegrationTests()
  }

  before('fullFunctionalTest') {
    env.PARALLEL_CHUNKS = params.FUNCTIONAL_TESTS_WORKERS
    env.MOCKED_PAYMENTS = false
    env.TEST_RETRIES = 1
    env.TESTS_FOR_ACCESSIBILITY = true
    env.ENV = 'aat'
  }

  after('fullFunctionalTest') {
    archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
    archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/serenity/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
    env.TESTS_FOR_ACCESSIBILITY = false
  }

  after('crossBrowserTest') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }
}
