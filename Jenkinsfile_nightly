#!groovy

properties([
  pipelineTriggers([cron('H 17 * * 1-5')]),
  parameters([
    string(name: 'ENVIRONMENT', defaultValue: 'aat',
      description: 'The environment you wish to run against (aat/demo/perftest/ithc)'),
  ])
])

@Library("Infrastructure")
import uk.gov.hmcts.contino.AppPipelineConfig

def type = 'java'
def product = 'fpl'
def component = 'case-service'
def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)
AppPipelineConfig pipelineConf;

def integrationTestSecrets = [
  'fpl-aat': [
    secret('integration-test-notify-service-key', 'INTEGRATION_TEST_NOTIFY_SERVICE_KEY'),
    secret('docmosis-api-key', 'INTEGRATION_TEST_DOCMOSIS_TORNADO_KEY'),
    secret('e2e-test-password', 'E2E_TEST_PASSWORD'),
    secret('e2e-test-judge-password', 'E2E_TEST_JUDGE_PASSWORD')
  ]
]


static Map<String, Object> secret(String secretName, String envVariable) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    envVariable: envVariable
  ]
}

def setupSecretsForIntegrationTests(pipelineConf) {
  withSubscription('nonprod') {
    withTeamSecrets(pipelineConf, 'aat') {
      /* Setup Email template integration tests key with gov.notify */
      env.INTEGRATION_TEST_NOTIFY_SERVICE_KEY = "${INTEGRATION_TEST_NOTIFY_SERVICE_KEY}"
      /* Setup Docmosis template integration tests key and url */
      env.INTEGRATION_TEST_DOCMOSIS_TORNADO_KEY = "${INTEGRATION_TEST_DOCMOSIS_TORNADO_KEY}"
      env.INTEGRATION_TEST_DOCMOSIS_TORNADO_URL = "https://docmosis.aat.platform.hmcts.net"
      env.INTEGRATION_TEST_DOCMOSIS_TORNADO_OUTPUT_FOLDER = "${WORKSPACE}/build/docmosis-generated"
    }
  }
}

def archiveExtraFilesForIntegrationTests() {
  steps.archiveArtifacts allowEmptyArchive: true, artifacts: "build/docmosis-generated/**/*"
}

def teardownSecretsForIntegrationTests() {
  env.INTEGRATION_TEST_NOTIFY_SERVICE_KEY = ''
  env.INTEGRATION_TEST_DOCMOSIS_TORNADO_KEY = ''
  env.INTEGRATION_TEST_DOCMOSIS_TORNADO_URL = ''
  env.INTEGRATION_TEST_DOCMOSIS_TORNADO_OUTPUT_FOLDER = ''
}

withNightlyPipeline(type, product, component) {
  pipelineConf = config;

  env.URL = params.FRONTEND_URL
  env.URL_FOR_SECURITY_SCAN = params.CASE_SERVICE_URL
  env.IDAM_API_URL=params.IDAM_API_URL
  env.CASE_SERVICE_URL=params.CASE_SERVICE_URL
  env.SECURITY_RULES = params.SECURITY_RULES
  env.ORG_ID = params.ORG_ID

  loadVaultSecrets(integrationTestSecrets)

//  enableMutationTest()
//  enableFortifyScan('fpl-aat')
  enableFullFunctionalTest(240)

//  before('mutationTest') {
//    setupSecretsForIntegrationTests(pipelineConf)
//  }

//  afterAlways('mutationTest') {
//    archiveExtraFilesForIntegrationTests()
//    teardownSecretsForIntegrationTests()
//  }

  before('fullFunctionalTest') {
    yarnBuilder.yarn('yarn-update')
    yarnBuilder.yarn('install-dependencies')
    env.PARALLEL_CHUNKS = params.FUNCTIONAL_TESTS_WORKERS
    env.MOCKED_PAYMENTS = false
    env.TEST_RETRIES = 5
    env.TESTS_FOR_ACCESSIBILITY = true
    env.ENV = 'aat'
    env.CASE_SERVICE_URL = "http://fpl-case-service-aat.service.core-compute-aat.internal"
  }

  afterAlways('fullFunctionalTest') {
    try {
      yarnBuilder.yarn('test:functional-nightly')
    } catch (Error) {
      unstable(message: Error.toString())
    } finally {
      env.TESTS_FOR_ACCESSIBILITY = false
      publishHTML([
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "build/reports/tests/functionalTest/",
        reportFiles          : 'index.html',
        reportName           : 'UI Functional Test Report'
      ])
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/tests/functionalTest/**/*'
    }
  }

//  afterAlways('fortify-scan') {
//    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
//  }
}
