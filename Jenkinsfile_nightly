#!groovy

properties([
  pipelineTriggers([cron('20 21 * * *')]),
  parameters([
    string(name: 'FRONTEND_URL', defaultValue: 'https://manage-case.aat.platform.hmcts.net',
      description: 'The URL you want to run the full functional tests against'),
    string(name: 'CASE_SERVICE_URL', defaultValue: 'http://fpl-case-service-aat.service.core-compute-aat.internal',
      description: 'The URL of case service callbacks'),
    string(name: 'IDAM_API_URL', defaultValue: 'https://idam-api.aat.platform.hmcts.net',
      description: 'The URL of idam api'),
    string(name: 'DM_STORE_URL', defaultValue: 'http://dm-store-aat.service.core-compute-aat.internal',
      description: 'The URL of dm store'),
    string(name: 'PROXY_SERVER', defaultValue: 'proxyout.reform.hmcts.net:8080',
      description: 'The proxy server to use'),
    string(name: 'SECURITY_RULES',
      defaultValue: 'https://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
      description: 'The security rules to use'),
    string(name: 'FUNCTIONAL_TESTS_WORKERS',
      defaultValue: '5',
      description: 'Number of workers running functional tests'),
  ])
])

@Library('Infrastructure')

def type = 'java'
def product = 'fpl'
def component = 'case-service'

withNightlyPipeline(type, product, component) {
  env.URL = params.FRONTEND_URL
  env.URL_FOR_SECURITY_SCAN = params.CASE_SERVICE_URL
  env.DM_STORE_URL=params.DM_STORE_URL
  env.IDAM_API_URL=params.IDAM_API_URL
  env.CASE_SERVICE_URL=params.CASE_SERVICE_URL
  env.PROXY_SERVER = params.PROXY_SERVER
  env.SECURITY_RULES = params.SECURITY_RULES

  enableSecurityScan()
  enableMutationTest()
  enableFullFunctionalTest(60)

  after('mutationTest') {
    withSonarQubeEnv('SonarQube') {
      sh './gradlew --info sonarqube'
    }
  }

  before('fullFunctionalTest') {
    env.PROXY = params.PROXY_SERVER
    env.PARALLEL_CHUNKS = params.FUNCTIONAL_TESTS_WORKERS
    env.MOCKED_PAYMENTS = false
    env.TEST_RETRIES = 2
  }

  after('fullFunctionalTest') {
    archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }
}
