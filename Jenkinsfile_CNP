#!groovy

@Library("Infrastructure")

import uk.gov.hmcts.contino.Kubectl

def type = "java"

def product = "fpl"
def component = "case-service"

List<Map<String, Object>> secrets = [
  secret('address-lookup-api-key', 'ADDRESS_LOOKUP_TOKEN')
]

static Map<String, Object> secret(String secretName, String envVariable) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    envVariable: envVariable
  ]
}

withPipeline(type, product, component) {
  setVaultName('fpl')
  loadVaultSecrets(secrets)
  // enableDockerBuild()
  // enableDeployToAKS()
  enableSlackNotifications('#fpl-tech')

  env.POSTCODE_PLACEHOLDER = '${postcode}'

  after('aksdeploy') {
    def subscription = env.SUBSCRIPTION_NAME
    def aksServiceName = "${product}-${component}-${env.BRANCH_NAME}".toLowerCase()
    def aksDomain = "${(env.SUBSCRIPTION_NAME in ['nonprod', 'prod']) ? 'service.core-compute-preview.internal' : 'service.core-compute-saat.internal'}"

    def kubectl = new Kubectl(this, subscription, aksServiceName)

    def ingressIP = kubectl.getServiceLoadbalancerIP("traefik", "kube-system")

    registerConsulDns(subscription, "service-auth-provider-api-${aksServiceName}", ingressIP)
    registerConsulDns(subscription, "idam-authentication-web-${aksServiceName}", ingressIP)
    registerConsulDns(subscription, "idam-api-${aksServiceName}", ingressIP)
    registerConsulDns(subscription, "ccd-case-management-web-${aksServiceName}", ingressIP)
    registerConsulDns(subscription, "ccd-api-gateway-${aksServiceName}", ingressIP)
    registerConsulDns(subscription, "ccd-definition-store-api-${aksServiceName}", ingressIP)
    registerConsulDns(subscription, "ccd-user-profile-api-${aksServiceName}", ingressIP)

    env.CCD_DEF_CASE_SERVICE_BASE_URL = "http://${aksServiceName}"

    env.IDAM_API_BASE_URL = "https://idam-api-${aksServiceName}.${aksDomain}"
    env.SERVICE_AUTH_PROVIDER_API_BASE_URL = "https://service-auth-provider-api-${aksServiceName}.${aksDomain}"
    env.CCD_DEFINITION_STORE_API_BASE_URL = "https://ccd-definition-store-api-${aksServiceName}.${aksDomain}"
    env.CCD_USER_PROFILE_API_BASE_URL = "https://ccd-user-profile-api-${aksServiceName}.${aksDomain}"
    env.URL = "https://ccd-case-management-web-${aksServiceName}.${aksDomain}"
  }

  after('deploy:preview') {
    env.PROXY_SERVER = "proxyout.reform.hmcts.net:8080"

    env.IDAM_API_BASE_URL = "https://preprod-idamapi.reform.hmcts.net:3511"
    env.SERVICE_AUTH_PROVIDER_API_BASE_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    env.CCD_DEFINITION_STORE_API_BASE_URL = "http://ccd-definition-store-api-aat.service.core-compute-aat.internal"
    env.CCD_USER_PROFILE_API_BASE_URL = "http://ccd-user-profile-api-aat.service.core-compute-aat.internal"
    env.URL = "https://ccd-case-management-web-aat.service.core-compute-aat.internal"
  }

  before('smoketest:aks') {
    sh """
      ./kubernetes/configurer/configure-ccd.sh
    """
  }

  before('smoketest:preview-staging') {
    sh """
      ./kubernetes/configurer/configure-ccd.sh
    """
  }

  after('smoketest:preview-staging') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  after('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }
}
