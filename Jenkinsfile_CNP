#!groovy

@Library("Infrastructure")
import uk.gov.hmcts.contino.ProjectBranch

def type = "java"

def product = "fpl"
def component = "case-service"

def serviceSecrets = [
  'fpl-${env}': [
    secret('smoke-test-la-username', 'SMOKE_TEST_LA_USER_USERNAME'),
    secret('smoke-test-la-password', 'SMOKE_TEST_LA_USER_PASSWORD')
  ]
]

def otherSecrets = [
  // below is just for CCD in AKS - to be cleaned up when CCD Helm chart is updated to use flex volume for secrets
  's2s-${env}': [
    secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_SECRET'),
    secret('microservicekey-ccd-data', 'CCD_DATA_STORE_S2S_SECRET'),
    secret('microservicekey-ccd-definition', 'CCD_DEFINITION_STORE_S2S_SECRET')
  ],
  'ccd-${env}': [
    secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_IDAM_CLIENT_SECRET'),
    secret('postcode-info-address-lookup-token', 'ADDRESS_LOOKUP_TOKEN')
  ],
  'fpl-${env}': [
    secret('ccd-importer-username', 'CCD_CONFIGURER_IMPORTER_USERNAME'),
    secret('ccd-importer-password', 'CCD_CONFIGURER_IMPORTER_PASSWORD')
  ]
]

static Map<String, Object> secret(String secretName, String envVariable) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    envVariable: envVariable
  ]
}

def archiveCoreCaseDataDefinitions(env) {
  sh "./bin/build-release-ccd-definition.sh ${env}"
  steps.archiveArtifacts artifacts: "build/ccd-release-config/ccd-fpl-${env}.xlsx"
}

/**
 * Imports CCD definitions into specified environment. Import XLSX file is archived when process completed.
 *
 * NOTE: It requires `bin/variables/load-${env}-environment-variables.sh` file to define environment specific URLs.
 *
 * @param env target environment
 */
def importCoreCaseDataDefinitions(env) {
  sh """
    eval \$(./bin/variables/load-${env}-environment-variables.sh)

    ./bin/configurer/import-ccd-definition.sh
  """
  steps.archiveArtifacts artifacts: "build/ccd-development-config/ccd-fpl-dev.xlsx"
}

withPipeline(type, product, component) {
  onMaster {
    loadVaultSecrets(serviceSecrets)
  }
  onDemo {
    loadVaultSecrets(serviceSecrets + otherSecrets)
  }
  onPR {
    loadVaultSecrets(serviceSecrets + otherSecrets)
  }
  if (!new ProjectBranch(env.BRANCH_NAME).isDemo()) {
    disableLegacyDeployment()
  }
  enableAksStagingDeployment()
  installCharts()
  enableSlackNotifications('#fpla-tech')

  env.PROXY_SERVER = "proxyout.reform.hmcts.net:8080"

  after('checkout') {
    onMaster {
      withCredentials([usernamePassword(credentialsId: 'jenkins-github-hmcts-api-token', usernameVariable: 'USERNAME', passwordVariable: 'BEARER_TOKEN')]) {
        try {
          sh '''
            set -e

            git remote set-url origin $(git config remote.origin.url | sed "s/github.com/${BEARER_TOKEN}@github.com/g")

            git fetch origin demo:demo
            git push --force origin HEAD:demo
          '''
        } catch (err) {
          notifyBuildEvent channel: '#fpla-tech', color: 'warning', message: 'Failed to update demo branch'
        }
      }
    }
  }

  before('smoketest:saat') {
    env.URL = "https://ccd-case-management-web-saat.service.core-compute-saat.internal"
    archiveCoreCaseDataDefinitions('saat')
  }

  before('smoketest:aat') {
    env.URL = "https://www-ccd.aat.platform.hmcts.net"
    archiveCoreCaseDataDefinitions('aat')
  }

  before('smoketest:demo-staging') {
    env.URL = "https://ccd-case-management-web-demo.service.core-compute-demo.internal"
    importCoreCaseDataDefinitions('demo')
  }

  before('smoketest:preview') {
    sh """
      eval \$(./bin/variables/load-preview-environment-variables.sh ${CHANGE_ID})

      ./bin/configurer/add-roles.sh
      ./bin/configurer/import-ccd-definition.sh
    """

    env.URL="https://case-management-web-fpl-case-service-pr-${CHANGE_ID}.service.core-compute-preview.internal"
  }

  after('smoketest:saat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  after('smoketest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  after('smoketest:demo-staging') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  after('smoketest:demo') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  before('functionalTest:saat') {
    env.SKIP_FUNCTIONAL_TESTS = 'true'
  }

  before('functionalTest:aat') {
    env.SKIP_FUNCTIONAL_TESTS = 'true'
  }

  before('functionalTest:demo') {
    env.SKIP_FUNCTIONAL_TESTS = 'true'
  }

  after('functionalTest:aat') {
    archiveCoreCaseDataDefinitions('prod')
  }

  after('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
    publishToCosmosDb(this, params, 'dbs/jenkins/colls/fpl-test-metrics', "${WORKSPACE}/output", 'metrics')
  }
}
