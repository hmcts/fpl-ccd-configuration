#!groovy

@Library("Infrastructure")

import uk.gov.hmcts.contino.Consul
import uk.gov.hmcts.contino.Kubectl

def type = "java"

def product = "fpl"
def component = "case-service"

List<Map<String, Object>> secrets = [
  secret('ccd-configurer-s2s-secret', 'CCD_CONFIGURER_S2S_SECRET'),
  secret('address-lookup-api-key', 'ADDRESS_LOOKUP_TOKEN'),
  secret('notify-api-key', 'NOTIFY_API_KEY'),
  secret('smoke-test-la-username', 'SMOKE_TEST_LA_USER_USERNAME'),
  secret('smoke-test-la-password', 'SMOKE_TEST_LA_USER_PASSWORD')
]

static Map<String, Object> secret(String secretName, String envVariable) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    envVariable: envVariable
  ]
}

def archiveCoreCaseDataDefinitions(env) {
  sh "./bin/build-release-ccd-definition.sh ${env}"
  steps.archiveArtifacts artifacts: "build/ccd-release-config/ccd-fpl-${env}.xlsx"
}

withPipeline(type, product, component) {
  setVaultName('fpl')
  loadVaultSecrets(secrets)
  enableDockerBuild()
  enableDeployToAKS()
  enableSlackNotifications('#fpl-tech')

  env.POSTCODE_PLACEHOLDER = '${postcode}'
  env.PROXY_SERVER = "proxyout.reform.hmcts.net:8080"

  after('checkout') {
    onMaster {
      withCredentials([usernamePassword(credentialsId: 'jenkins-github-hmcts-api-token', usernameVariable: 'USERNAME', passwordVariable: 'BEARER_TOKEN')]) {
        try {
          sh '''
            set -e

            git remote set-url origin $(git config remote.origin.url | sed "s/github.com/${BEARER_TOKEN}@github.com/g")

            git fetch origin demo:demo
            git push --force origin HEAD:demo
          '''
        } catch (err) {
          notifyBuildEvent channel: '#fpl-tech', color: 'warning', message: 'Failed to update demo branch'
        }
      }
    }
  }

  after('aksdeploy') {
    def aksServiceName = "${product}-${component}-${env.BRANCH_NAME}".toLowerCase()
    def aksDomain = "${(env.SUBSCRIPTION_NAME in ['nonprod', 'prod']) ? 'service.core-compute-preview.internal' : 'service.core-compute-saat.internal'}"

    def kubectl = new Kubectl(this, env.SUBSCRIPTION_NAME, aksServiceName)

    def ingressIP = kubectl.getServiceLoadbalancerIP("traefik", "admin")

    def consul = new Consul(this, env.SUBSCRIPTION_NAME in ['nonprod', 'prod'] ? 'preview' : 'saat')
    consul.registerDns("service-auth-provider-api-${aksServiceName}", ingressIP)
    consul.registerDns("idam-authentication-web-${aksServiceName}", ingressIP)
    consul.registerDns("idam-api-${aksServiceName}", ingressIP)
    consul.registerDns("ccd-case-management-web-${aksServiceName}", ingressIP)
    consul.registerDns("ccd-api-gateway-${aksServiceName}", ingressIP)
    consul.registerDns("ccd-definition-store-api-${aksServiceName}", ingressIP)
    consul.registerDns("ccd-user-profile-api-${aksServiceName}", ingressIP)

    env.DATABASE_HOST = kubectl.getServiceLoadbalancerIP("shared-database")
    env.IDAM_API_BASE_URL = "https://idam-api-${aksServiceName}.${aksDomain}"
    env.SERVICE_AUTH_PROVIDER_API_BASE_URL = "https://service-auth-provider-api-${aksServiceName}.${aksDomain}"
    env.CCD_DEFINITION_STORE_API_BASE_URL = "https://ccd-definition-store-api-${aksServiceName}.${aksDomain}"
    env.CCD_USER_PROFILE_API_BASE_URL = "https://ccd-user-profile-api-${aksServiceName}.${aksDomain}"
    env.URL = "https://ccd-case-management-web-${aksServiceName}.${aksDomain}"
  }

  before('smoketest:saat-staging') {
    env.URL = "https://ccd-case-management-web-saat.service.core-compute-saat.internal"
    archiveCoreCaseDataDefinitions('saat')
  }

  before('smoketest:aat-staging') {
    env.URL = "https://ccd-case-management-web-aat.service.core-compute-aat.internal"
    archiveCoreCaseDataDefinitions('aat')
  }

  before('smoketest:prod-staging') {
    env.URL = "https://ccd-case-management-web-prod.service.core-compute-prod.internal"
    archiveCoreCaseDataDefinitions('prod')
  }

  before('smoketest:demo-staging') {
    env.URL = "https://ccd-case-management-web-demo.service.core-compute-demo.internal"
    archiveCoreCaseDataDefinitions('demo')
  }

  before('smoketest:preview') {
    env.CCD_DEF_CASE_SERVICE_BASE_URL = env.TEST_URL.replace('https', 'http')

    sh """
      CCD_CONFIGURER_S2S_SECRET=AABBCCDDEEFFGGHH ./kubernetes/configurer/configure-ccd.sh
    """
  }

  after('smoketest:saat-staging') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  after('smoketest:saat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  after('smoketest:aat-staging') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  after('smoketest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  after('smoketest:demo-staging') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  after('smoketest:demo') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  before('functionalTest:saat') {
    env.SKIP_FUNCTIONAL_TESTS = 'true'
  }

  before('functionalTest:demo') {
    env.SKIP_FUNCTIONAL_TESTS = 'true'
  }

  after('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  after('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }
}
