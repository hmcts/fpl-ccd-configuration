#!groovy

@Library("Infrastructure@fpl-long-ft-timeout")
import uk.gov.hmcts.contino.AppPipelineConfig
import uk.gov.hmcts.contino.AppPipelineDsl

def type = "java"

def product = "fpl"
def component = "case-service"
AppPipelineConfig pipelineConf;

def serviceSecrets = [
  'fpl-${env}': [
    secret('smoke-test-la-username', 'SMOKE_TEST_LA_USER_USERNAME'),
    secret('smoke-test-la-password', 'SMOKE_TEST_LA_USER_PASSWORD'),
    secret('system-update-user-username', 'SYSTEM_UPDATE_USER_USERNAME'),
    secret('system-update-user-password', 'SYSTEM_UPDATE_USER_PASSWORD')
  ]
]

def integrationTestSecrets = [
  'fpl-aat': [
    secret('integration-test-notify-service-key', 'INTEGRATION_TEST_NOTIFY_SERVICE_KEY'),
    secret('docmosis-api-key', 'INTEGRATION_TEST_DOCMOSIS_TORNADO_KEY')
  ]
]

def otherSecrets = [
  // below is just for CCD in AKS - to be cleaned up when CCD Helm chart is updated to use flex volume for secrets
  's2s-${env}': [
    secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_SECRET'),
    secret('microservicekey-ccd-data', 'CCD_DATA_STORE_S2S_SECRET'),
    secret('microservicekey-ccd-definition', 'CCD_DEFINITION_STORE_S2S_SECRET')
  ],
  'ccd-${env}': [
    secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_IDAM_CLIENT_SECRET'),
    secret('postcode-info-address-lookup-token', 'ADDRESS_LOOKUP_TOKEN'),
    secret('idam-data-store-client-secret', 'IDAM_OAUTH2_DATA_STORE_CLIENT_SECRET'),
    secret('idam-data-store-system-user-username', 'IDAM_DATA_STORE_SYSTEM_USER_USERNAME'),
    secret('idam-data-store-system-user-password', 'IDAM_DATA_STORE_SYSTEM_USER_PASSWORD')
  ],
  'fpl-${env}': [
    secret('definition-importer-username', 'CCD_CONFIGURER_IMPORTER_USERNAME'),
    secret('definition-importer-password', 'CCD_CONFIGURER_IMPORTER_PASSWORD')
  ]
]

static Map<String, Object> secret(String secretName, String envVariable) {
  [
    $class     : 'AzureKeyVaultSecret',
    secretType : 'Secret',
    name       : secretName,
    envVariable: envVariable
  ]
}

def archiveCoreCaseDataDefinitions(env) {
  dir("${WORKSPACE}/bin") {
    if ("preview" == env) {
      sh "./build-preview-ccd-definitions.sh ${CHANGE_ID}"
    } else {
      sh "./build-release-ccd-definition.sh ${env}"
      sh "./build-shuttered-ccd-definition.sh ${env}"
    }
  }

  dir("${WORKSPACE}/build") {
    if ("preview" == env) {
      steps.archiveArtifacts artifacts: "ccd-release-config/ccd-fpl-preview-${CHANGE_ID}-toggle-on.xlsx"
      steps.archiveArtifacts artifacts: "ccd-release-config/ccd-fpl-preview-${CHANGE_ID}-toggle-off.xlsx"
      steps.archiveArtifacts artifacts: "ccd-release-config/ccd-fpl-preview-${CHANGE_ID}-shuttered.xlsx"
    } else {
      steps.archiveArtifacts artifacts: "ccd-release-config/ccd-fpl-${env}.xlsx"
      steps.archiveArtifacts artifacts: "ccd-release-config/ccd-fpl-${env}-shuttered.xlsx"
    }
  }
}

/**
 * Imports CCD definitions into specified environment. Import XLSX file is archived when process completed.
 *
 * NOTE: It requires `bin/variables/load-${env}-environment-variables.sh` file to define environment specific URLs.
 *
 * @param env target environment
 */
def uploadCoreCaseDataDefinitions(env, useShutteredCaseDef) {
  dir("${WORKSPACE}/bin"){
    if("preview" == env){
      ccdDefinitionFilePath = "${WORKSPACE}/build/ccd-release-config/ccd-fpl-preview-${CHANGE_ID}-toggle-on.xlsx"
      sh """
        eval \$(./variables/load-preview-environment-variables.sh ${CHANGE_ID})
        ${WORKSPACE}/fpla-docker/bin/utils/ccd-import-definition.sh ${ccdDefinitionFilePath}
      """
    } else {
      ccdDefinitionFilePath = useShutteredCaseDef == '1'
        ? "${WORKSPACE}/build/ccd-release-config/ccd-fpl-${env}-shuttered.xlsx"
        : "${WORKSPACE}/build/ccd-release-config/ccd-fpl-${env}.xlsx"

      sh """
        eval \$(./variables/load-${env}-environment-variables.sh)
        ${WORKSPACE}/fpla-docker/bin/utils/ccd-import-definition.sh ${ccdDefinitionFilePath}
      """
    }
  }
}

def setupSecretsForIntegrationTests(pipelineConf) {
  withSubscription('nonprod') {
    withTeamSecrets(pipelineConf, 'aat') {
      /* Setup Email template integration tests key with gov.notify */
      env.INTEGRATION_TEST_NOTIFY_SERVICE_KEY = "${INTEGRATION_TEST_NOTIFY_SERVICE_KEY}"
      /* Setup Docmosis template integration tests key and url */
      env.INTEGRATION_TEST_DOCMOSIS_TORNADO_KEY = "${INTEGRATION_TEST_DOCMOSIS_TORNADO_KEY}"
      env.INTEGRATION_TEST_DOCMOSIS_TORNADO_URL = "https://docmosis.aat.platform.hmcts.net"
      env.INTEGRATION_TEST_DOCMOSIS_TORNADO_OUTPUT_FOLDER = "${WORKSPACE}/build/docmosis-generated"
    }
  }
}

def archiveExtraFilesForIntegrationTests() {
  steps.archiveArtifacts allowEmptyArchive: true, artifacts: "build/docmosis-generated/**/*"
}

def teardownSecretsForIntegrationTests() {
  env.INTEGRATION_TEST_NOTIFY_SERVICE_KEY = ''
  env.INTEGRATION_TEST_DOCMOSIS_TORNADO_KEY = ''
  env.INTEGRATION_TEST_DOCMOSIS_TORNADO_URL = ''
  env.INTEGRATION_TEST_DOCMOSIS_TORNADO_OUTPUT_FOLDER = ''
}

def setupShutteringSecret() {
  azureKeyVault(
    keyVaultURL: "https://fpl-${env.ENV}.vault.azure.net/",
    secrets: [
      secret('use-shuttered-case-def', 'USE_SHUTTERED_CASE_DEF')
    ]) {
    env.USE_SHUTTERED_CASE_DEF = "${USE_SHUTTERED_CASE_DEF}"
  }
}


// Vars for Kubernetes
env.PACT_BROKER_FULL_URL = 'https://pact-broker.platform.hmcts.net'

withPipeline(type, product, component) {
  pipelineConf = config;

  loadVaultSecrets(serviceSecrets + integrationTestSecrets + otherSecrets)

  disableLegacyDeployment()

  enableAksStagingDeployment()
  enableSlackNotifications('#fpla-tech')
  enableHighLevelDataSetup()

  onMaster() {
    env.ENV = 'aat'
    enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
  }
  onPR() {
    env.ENV = 'preview'
    enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
  }
  onDemo {
    env.ENV = 'demo'
  }
  onPerftest {
    env.ENV = 'perftest'
  }
  onIthc {
    env.ENV = 'ithc'
  }

  after('checkout') {
    onMaster {
      withCredentials([usernamePassword(credentialsId: 'jenkins-github-hmcts-api-token', usernameVariable: 'USERNAME', passwordVariable: 'BEARER_TOKEN')]) {
        try {
          sh '''
            set -e

            git remote set-url origin $(git config remote.origin.url | sed "s/github.com/${BEARER_TOKEN}@github.com/g")

            git fetch origin demo:demo
            git push --force origin HEAD:demo

            git fetch origin perftest:perftest
            git push --force origin HEAD:perftest
          '''
        } catch (err) {
          notifyBuildEvent channel: '#fpla-tech', color: 'warning', message: 'Failed to update demo and perftest branch'
        }
      }
    }
    sh """ git submodule update --init """
  }

  before('test') {
    setupSecretsForIntegrationTests(pipelineConf)
  }

  after('test') {
    archiveExtraFilesForIntegrationTests()
    teardownSecretsForIntegrationTests()
  }

  before('smoketest:saat') {
    env.URL = "https://ccd-case-management-web-saat.service.core-compute-saat.internal"
    archiveCoreCaseDataDefinitions('saat')
  }

  before('smoketest:preview') {
    sh """
      eval \$(./bin/variables/load-preview-environment-variables.sh ${CHANGE_ID})
      ./fpla-docker/bin/add-roles.sh
    """

    archiveCoreCaseDataDefinitions('preview')
    uploadCoreCaseDataDefinitions('preview', '0')

    env.IDAM_API_URL = "https://idam-api.aat.platform.hmcts.net"
    env.CASE_SERVICE_URL = "http://fpl-case-service-pr-${CHANGE_ID}.service.core-compute-preview.internal"
    env.URL = "http://xui-fpl-case-service-pr-${CHANGE_ID}.service.core-compute-preview.internal"
    env.SWANSEA_ORG_ID = "62LYJRF"
    env.MOCKED_PAYMENTS = false
    env.PARALLEL_CHUNKS = 4
    env.TEST_RETRIES = 2
  }

  after('smoketest:saat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  after('smoketest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  after('smoketest:demo-staging') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  after('smoketest:demo') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  before('functionalTest:aat') {
    env.SKIP_BROWSER_TESTS = 'true'
  }

  before('functionalTest:demo') {
    env.SKIP_API_TESTS = 'true'
    env.SKIP_BROWSER_TESTS = 'true'
  }

  after('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/serenity/**/*'
    env.ENV = 'prod'
    // all the AAT tasks in the master pipeline finished, so we update the env variable to promote to prod tasks
  }

  after('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/tests/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/serenity/**/*'
  }

  after('highleveldatasetup') {
    if (env.ENV != 'preview') {
      // For Preview the setup is performed before the smoke test since the environment could be not bootstrapped yet (if the first build or removed the PR helm release)
      echo "CCD definition upload for environment: ${env.ENV}"
      setupShutteringSecret()
      withSubscription(env.ENV != 'prod' ? 'nonprod' : 'prod') {
        withTeamSecrets(pipelineConf, env.ENV) {
          archiveCoreCaseDataDefinitions(env.ENV)
          uploadCoreCaseDataDefinitions(env.ENV, env.USE_SHUTTERED_CASE_DEF)
        }
      }
    } else {
      echo "CCD definition upload SKIPPED for environment: ${env.ENV}"
    }
  }

  before('smoketest:aat') {
    env.URL = "https://manage-case.aat.platform.hmcts.net"
    env.TEST_CONF_FPL_URL = "http://fpl-case-service-staging.service.core-compute-aat.internal"
    env.SMOKE_TESTS_SELECTOR = "@skip-smoke-test"
  }
}
